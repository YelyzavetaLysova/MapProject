@using MapProject.Web.Models;
@model RenderMapModel


@{
    ViewBag.Title = "MapProject - " + Model.Map.Name;
    Layout = "~/Views/Shared/_Layout.cshtml";
}




@{
    string currentDataSet = Model.DataSet == null ? "Data set is not loaded" : Model.DataSet.Key;
    bool dataSetNull = this.Model.DataSet == null;
    string dataSetId = Model.DataSet == null ? String.Empty : Model.DataSet.Key;


    int maxX = Model.Map.Regions.Max(x => x.Points.Max(y => y.X));
    int maxY = Model.Map.Regions.Max(x => x.Points.Max(y => y.Y));
}



<div class="container-fluid">

    <div id="currentMapName" hidden>@Model.Map.Name</div>
    <div id="currentDataSet" hidden>@dataSetId</div>
    <div id="currentRegionId" hidden></div>
    @*<div id="jsonDataSet" hidden>@Model.JsonDataSet</div>*@

    <div class="row">

        <nav id="sidebarMenu" class="col-md-3 col-lg-3 d-md-block bg-light sidebar collapse">
            <div class="sidebar-sticky pt-3">


                <div class="alert alert-primary">Current map - <b>@Model.Map.Name</b></div>

                

                @{

                    await Html.RenderPartialAsync("ManageDataSet", new ManageDataSetModel() { MapName = Model.Map.Name, DataSetName = dataSetId, DataSets = Model.DataSetNames });
                }

                <p></p>

                <div id="regionManagement">

                    @*@Component.InvokeAsync("ManageRegion", new )*@

                </div>

            </div>
        </nav>
    </div>


    <main class="main-rendermap">
        <div class="svg-ct">

            @*<svg height="300px" width="300px">*@

            <svg height="@maxY" width="@maxX">
                @{

                    foreach (var region in Model.Map.Regions)
                    {

                        <g>
                            @{

                                string points = String.Empty;
                            }

                            @for (int i = 0; i < region.Points.Count; i++)
                            {

                                var point = region.Points[i];

                                points += point.X + "," + point.Y + " ";
                            }

                            <polygon id="@region.Id" points="@points.Remove(points.Length - 1)" fill="white" stroke="black" onclick="regionOnClickHandler(this.id)" />

                        </g>
                    }


                }
            </svg>

        </div>
    </main>


</div>

<script src="~/js/mapProject.js"></script>



